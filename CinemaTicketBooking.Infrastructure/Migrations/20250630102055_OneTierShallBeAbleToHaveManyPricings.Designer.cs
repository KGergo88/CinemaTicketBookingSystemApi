// <auto-generated />
using System;
using CinemaTicketBooking.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CinemaTicketBooking.Infrastructure.Migrations
{
    [DbContext(typeof(CinemaTicketBookingDbContext))]
    [Migration("20250630102055_OneTierShallBeAbleToHaveManyPricings")]
    partial class OneTierShallBeAbleToHaveManyPricings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.AuditoriumEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TheaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TheaterId");

                    b.ToTable("Auditoriums");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.BookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookingState")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScreeningId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("BookingState", "CreatedOn");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.GenreEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.MovieEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationInSeconds")
                        .HasPrecision(5)
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseYear")
                        .HasPrecision(4)
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.HasIndex("Title", "ReleaseYear")
                        .IsUnique()
                        .HasFilter("[ReleaseYear] IS NOT NULL");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.PricingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("ScreeningId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TierId");

                    b.HasIndex("ScreeningId", "Currency")
                        .IsUnique();

                    b.HasIndex("ScreeningId", "TierId")
                        .IsUnique();

                    b.ToTable("Pricings");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.ScreeningEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuditoriumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Showtime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Subtitles")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("AuditoriumId", "Showtime")
                        .IsUnique();

                    b.ToTable("Screenings");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.SeatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<Guid>("TierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TierId", "Row", "Column")
                        .IsUnique();

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.SeatReservationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("ScreeningId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("SeatId");

                    b.HasIndex("ScreeningId", "SeatId")
                        .IsUnique();

                    b.ToTable("SeatReservations");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.TheaterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Name", "Address")
                        .IsUnique();

                    b.ToTable("Theaters");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.TierEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuditoriumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuditoriumId");

                    b.HasIndex("Name", "AuditoriumId")
                        .IsUnique();

                    b.ToTable("Tiers");
                });

            modelBuilder.Entity("GenreEntityMovieEntity", b =>
                {
                    b.Property<string>("GenresName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenresName", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreEntityMovieEntity");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.AuditoriumEntity", b =>
                {
                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.TheaterEntity", "Theater")
                        .WithMany("Auditoriums")
                        .HasForeignKey("TheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theater");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.BookingEntity", b =>
                {
                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.ScreeningEntity", "Screening")
                        .WithMany()
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.PricingEntity", b =>
                {
                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.ScreeningEntity", "Screening")
                        .WithMany("Pricings")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.TierEntity", "Tier")
                        .WithMany("Pricings")
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Screening");

                    b.Navigation("Tier");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.ScreeningEntity", b =>
                {
                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.AuditoriumEntity", "Auditorium")
                        .WithMany()
                        .HasForeignKey("AuditoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.MovieEntity", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditorium");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.SeatEntity", b =>
                {
                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.TierEntity", "Tier")
                        .WithMany("Seats")
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tier");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.SeatReservationEntity", b =>
                {
                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.BookingEntity", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.ScreeningEntity", "Screening")
                        .WithMany("SeatReservations")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.SeatEntity", "Seat")
                        .WithMany("SeatReservations")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Screening");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.TierEntity", b =>
                {
                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.AuditoriumEntity", "Auditorium")
                        .WithMany("Tiers")
                        .HasForeignKey("AuditoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditorium");
                });

            modelBuilder.Entity("GenreEntityMovieEntity", b =>
                {
                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenresName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaTicketBooking.Infrastructure.Entities.MovieEntity", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.AuditoriumEntity", b =>
                {
                    b.Navigation("Tiers");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.ScreeningEntity", b =>
                {
                    b.Navigation("Pricings");

                    b.Navigation("SeatReservations");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.SeatEntity", b =>
                {
                    b.Navigation("SeatReservations");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.TheaterEntity", b =>
                {
                    b.Navigation("Auditoriums");
                });

            modelBuilder.Entity("CinemaTicketBooking.Infrastructure.Entities.TierEntity", b =>
                {
                    b.Navigation("Pricings");

                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
